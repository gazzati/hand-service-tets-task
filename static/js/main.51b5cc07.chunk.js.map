{"version":3,"sources":["assets/skull.svg","assets/fire.svg","assets/chick.svg","Item.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Item","type","className","src","skull","alt","fire","chick","App","useState","items","setItems","map","item","key","index","onClick","rand","Math","round","random","prev","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6HAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,sMCwC5BC,MAlCf,YAAuB,IAARC,EAAO,EAAPA,KACX,OACI,yBAAKC,UAAU,QACD,IAATD,EACK,oCACE,yBAAKC,UAAU,UACX,yBAAKA,UAAU,UAAUC,IAAKC,IAAOC,IAAI,WAE7C,yBAAKH,UAAU,aAAf,6CACI,uBAAGA,UAAU,mBAAb,uGAGG,IAATD,EACE,oCACI,yBAAKC,UAAU,UACX,yBAAKA,UAAU,UAAUC,IAAKG,IAAMD,IAAI,UAE5C,yBAAKH,UAAU,aAAf,iCACI,uBAAGA,UAAU,mBAAb,oEAIR,oCACI,yBAAKA,UAAU,UACX,yBAAKA,UAAU,WAAWC,IAAKI,IAAOF,IAAI,WAE9C,yBAAKH,UAAU,aAAf,iCACI,uBAAGA,UAAU,mBAAb,kCCAbM,MA9Bf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACJC,EADI,KACGC,EADH,KAcX,OACI,yBAAKT,UAAU,QACX,wBAAIA,UAAU,SAAd,uHAGA,yBAAKA,UAAU,cACVQ,EAAME,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAMZ,KAAMY,EAAMC,IAAKD,EAAKE,YAEnD,4BAAQb,UAAU,MAAMc,QAnBb,WACf,IAAIC,EAAOC,KAAKC,MAAMD,KAAKE,UAC3BT,GAAS,SAAAU,GAAI,OAAKJ,GAAL,mBAAcI,OACxBX,EAAM,GAAKA,EAAM,GAAKO,IAAS,GAAkB,IAAbP,EAAM,KAEzCA,EAAM,GAAK,GAEC,IAAbA,EAAM,IAAqB,IAATO,GACjBN,GAAS,SAAAU,GAAI,OAAK,GAAL,mBAAWA,SAWxB,4DCbQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.51b5cc07.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/skull.07d408e4.svg\";","module.exports = __webpack_public_path__ + \"static/media/fire.17f5b7f1.svg\";","module.exports = __webpack_public_path__ + \"static/media/chick.b941947c.svg\";","import React from 'react'\nimport skull from './assets/skull.svg'\nimport fire from './assets/fire.svg'\nimport chick from './assets/chick.svg'\n\n\nfunction Item({type}) {\n    return (\n        <div className=\"item\">\n            {type === 0\n                ? <>\n                    <div className=\"bg bg1\">\n                        <img className=\"itemImg\" src={skull} alt='skull'/>\n                    </div>\n                    <div className=\"itemTitle\">Мёртвая\n                        <p className=\"itemDescription\">или прикидывается</p>\n                    </div>\n                </>\n                : type === 1 ?\n                    <>\n                        <div className=\"bg bg2\">\n                            <img className=\"itemImg\" src={fire} alt='fire'/>\n                        </div>\n                        <div className=\"itemTitle\">Живая\n                            <p className=\"itemDescription\">и шевелится!</p>\n                        </div>\n                    </>\n                    :\n                    <>\n                        <div className=\"bg bg3\">\n                            <img className=\"itemImg \" src={chick} alt='chick'/>\n                        </div>\n                        <div className=\"itemTitle\">Жизнь\n                            <p className=\"itemDescription\">Ку-ку!</p>\n                        </div>\n                    </> }\n        </div>\n    )\n}\n\nexport default Item\n","import React, { useState } from 'react'\nimport Item from './Item'\n\nfunction App() {\n    const [items, setItems] = useState([]);\n\n    const createItem = () => {\n        let rand = Math.round(Math.random())\n        setItems(prev => [rand, ...prev])\n        if(items[0] + items[1] + rand === 0 && items[2] === 2) {\n            debugger\n            items[2] = 0\n        }\n        if(items[0] === 1 && rand === 1) {\n            setItems(prev => [2, ...prev])\n        }\n    }\n    return (\n        <div className=\"wrap\">\n            <h3 className=\"title\">\n                Клеточное наполнение\n            </h3>\n            <div className=\"itemsBlock\">\n                {items.map(item => <Item type={item} key={item.index}/>)}\n            </div>\n            <button className=\"btn\" onClick={createItem}>\n                сотворить\n            </button>\n\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './style.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}